# -*- coding: utf-8 -*-
"""MLT_Submission_1_(Analisis_Prediktif_Data_Air_Bersih_Di_Masyarakat).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6aK0ZeLR2vekZmtENqQ54WIxso4hzA7

# **Predictive Analysis Of Clean Water Data In The Community**
Analisis Prediktif Data Air Bersih Di Masyarakat

Nama : Ayudha Kusuma Rahmadhani

Kaggel : https://www.kaggle.com/adityakadiwal/water-potability

# **1. Data Loading**
"""

# Menginstal modul plotly & scikit-learn
!pip install -U plotly
!pip install -U scikit-learn
! pip install kaggle

# Pengolahan Data
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.utils import resample 

#Visualisasi Data
import plotly.express as px
import missingno as msno

#Pembuatan Model 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import LocalOutlierFactor
from sklearn.experimental import enable_halving_search_cv
from sklearn.model_selection import HalvingGridSearchCV, StratifiedKFold


# Eksekusi Model
from sklearn.metrics import confusion_matrix, classification_report

"""# **2. Mempersiapkan Dataset**

2.1 Menyiapkan kredensial akun Kaggle
"""

from google.colab import files
files.upload() #upload kaggle.json

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
# Mengunduh dataset menggunakan Kaggle CLI
!kaggle datasets download -dadityakadiwal/water-potability
# Mengekstrak berkas zip ke direktori aktif saat ini
!unzip /content/water-potability.zip

"""# **3.Exploratory Data Analysis** - Deskripsi Variabel

3.1 Memuat Data pada sebuah Dataframe menggunakan pandas
"""

df = pd.read_csv("/content/water_potability.csv")
# Memuat informasi dataframe
df.info()
# Menghitung jumlah data kosong pada setiap kolom
df.isna().sum()
# deskripsi statistik data dengan fitur describe()
df.describe()
df.head()

"""3.2 Visualisasi Data"""

# Melakukan Fungsi untuk plot distribusi data pada suatu kolom
def plot_distribution(column:str, title:str):
  figures = px.histogram(data_frame=df,
                        x=column,
                        color='Potability',
                        template='plotly_white',
                        marginal='box',
                        nbins=200,
                        color_discrete_sequence=["#C2DEDC","#73BBC9"],
                        barmode='stack',
                        histfunc='count')

  figures.update_layout(font_family='Open Sans',
                        title=dict(text=title,
                                  x=0.47,
                                  font=dict(color="#333",size=20)),
                        hoverlabel=dict(bgcolor='white'))

  figures.show()

"""3.2.1 Visualisasi data yang kosong"""

# Melakukan visualisasi data yang kosong
figures = msno.matrix(df, color=(0, 0.5, 0.5))

"""3.2.2 Distribusi kelas pada kolom dengan fitur kategori (Potability)"""

potability_data = pd.DataFrame(df['Potability'].value_counts())
figures = px.pie(data_frame=potability_data,
             values='Potability',
             names=['Not Potable','Potable'],
             hole=0.4,
             color_discrete_sequence=["#C2DEDC","#73BBC9"],
             labels={'label':'Potability','Potability':'No. Of Samples'})

figures.update_layout(font_family='Open Sans',
                      title=dict(text='Distribusi kelas pada kolom potability',
                                 x=0.49,
                                 y=0.95,
                                 font=dict(color="#333",size=20)),
                      hoverlabel=dict(bgcolor='white'))

figures.update_traces(textposition='outside', textinfo='percent+label')

figures.show()

"""3.2.3 Korelasi data antar kolom dengan fitur numerik"""

# Visualisasi matrix dari korelasi data
figures = px.scatter_matrix(data_frame=df, 
                            dimensions=df.drop('Potability',axis=1),
                            template='plotly_white',
                            color="Potability",
                            symbol="Potability",
                            color_discrete_sequence=["#FF7171","#9FD8DF"],
                            color_continuous_scale=["#FF7171","#9FD8DF"],
                            height=1500)

figures.update_layout(font_family='Open Sans',
                      font_size=10,
                      title=dict(text='Korelasi data antar kolom (fitur numerik) - Visualisasi Matrix',
                                 x=0.49,
                                 y=0.98,
                                 font=dict(color="#333",size=20)),
                      hoverlabel=dict(bgcolor='white'),
                      coloraxis_showscale=False)

figures.update_traces(diagonal_visible=False)

figures.show()



# Mempersiapkan dataframe korelasi data antar kolom
correlations_data=df.drop('Potability',axis=1).corr()
correlations_data

# Visualisasi heatmap dari korelasi data
# semakin mendekati 1 semakin tinggi korelasi datanya
# semkain mendekati -1 semakin rendah korelasi datanya
figures = px.imshow(correlations_data,
                    color_continuous_scale=["#C2DEDC","#73BBC9"])

figures.update_layout(font_family='Open Sans',
                      font_size=10,
                      title=dict(text='Korelasi data antar kolom (fitur numerik) - Visualisasi Heatmap',
                                 x=0.49,
                                 y=0.98,
                                 font=dict(color="#333",size=20)),
                      hoverlabel=dict(bgcolor='white'))

figures.show()

"""# **4. Persiapan Data (Data Preparation)**

4.1 Mengatasi masalah data yang kosong dengan nilai rata-rata kolom (mean substitution)
"""

# Rata-rata data pada kolom yang memiliki data kosong, dengan kondisi kolom Potability = 0
df[df['Potability']==0][['ph','Sulfate','Trihalomethanes']].mean()

# Rata-rata data pada kolom yang memiliki data kosong, dengan kondisi kolom Potability = 1
df[df['Potability']==1][['ph','Sulfate','Trihalomethanes']].mean()

# Rata-rata data pada kolom yang memiliki data kosong (data keseluruhan)
df[['ph','Sulfate','Trihalomethanes']].mean()

# Melakukan penggantian data kosong dengan nilai rata rata kolom 
# dan memasukkannya pada variabel df
df['ph'].fillna(value=df['ph'].mean(),inplace=True)
df['Sulfate'].fillna(value=df['Sulfate'].mean(),inplace=True)
df['Trihalomethanes'].fillna(value=df['Trihalomethanes'].mean(),inplace=True)

# Mengecek kembali nilai yang kosong pada dataset
df.isna().sum()

# Mengecek total baris dan kolom dari dataset
df.head()

"""4.2 Mengatasi masalah data tidak seimbang dengan resample"""

# Menghitung label dari kolom potability
df.Potability.value_counts()

# Memilih setiap labelnya
zero  = df[df['Potability']==0]
one = df[df['Potability']==1]

# Melakukan resample sehingga banyak data pada label = 1
# adalah 1988
df_minority_resampled = resample(one, replace = True, n_samples = 1998)

# Memasukan datanya pada dataframe
df = pd.concat([zero, df_minority_resampled])

# Menghitung label dari kolom potability
df.Potability.value_counts()

"""4.3 Melakukan pembagian data pada dataset dengan train_test_split"""

X = df.drop('Potability',axis=1).values
y = df['Potability'].values

# Melakukan pembagian data dengan train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=404, stratify=y)

# Mengecek jumlah baris pada data latih dan data 
print(X_train.shape)
print(X_test.shape)

"""4.4 Mengatasi data pencilan pada data latih dengan metode LOF (Local Outlier Factor)"""

# Inisialisasi fungsi LocalOutlierFactor
lof = LocalOutlierFactor().fit_predict(X_train)

# Memilih semua baris yang bukan outlier
# Memasukannya kembali kedalam dataset
mask = lof != -1
X_train, y_train = X_train[mask, :], y_train[mask]

X_train.shape

"""4.5 Standarisasi nilai data pada fitur numerik dengan MinMaxScaler"""

# Inisialisasi fungsi MinMaxScaler
scaler = MinMaxScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Melihat sampel hasil standarisasi data
print(f"{X_train[0:3]} \n")
print(X_test[0:3])

# Mengecek jumlah baris pada data latih dan data 
print(X_train.shape)
print(X_test.shape)

"""5. Pembuatan Model

5.1 Model Baseline dengan Algoritma K-Nearest NeighborsÂ¶
"""

# Pembuatan model baseline
baseline_model = KNeighborsClassifier()
baseline_model.fit(X_train, y_train)

# Pengujian model terhadap data test
y_pred = baseline_model.predict(X_test)

# Laporan hasil klasifikasi model baseline
baseline_report = classification_report(y_test, y_pred, output_dict=True, target_names=['Not Potable',"Potable"])
pd.DataFrame(baseline_report).transpose()

# Menyimpan hasil prediksi untuk confussion matrix
baseline_cf = confusion_matrix(y_test, y_pred)

"""5.2 Pengembangan Model K-Nearest Neighbors dengan Hyper Parameter Tuning menggunakan HalvingGridSearchCV"""

# Hyperparameter yang akan di tuning
param_grid = {'n_neighbors': [1, 2],
              'p': [1, 2],
              'weights': ["uniform","distance"],
              'algorithm':["ball_tree", "kd_tree", "brute"],
              }

# Pencarian parameter terbaik dengan HalvingGridSearchCV
new_param = HalvingGridSearchCV(baseline_model, 
                                param_grid, 
                                cv=StratifiedKFold(n_splits=4, random_state=404, shuffle=True),
                                resource='leaf_size',
                                max_resources=20,
                                scoring='accuracy',
                                aggressive_elimination=True).fit(X_train, y_train)

# Hasil hyperparameter tuning dengan skor terbaik yang di dapatkan
print(f"Best parameter {new_param.best_estimator_} with score {new_param.best_score_}")

# Penerapan hyperparameter pada model baseline
model = KNeighborsClassifier(algorithm='ball_tree', leaf_size=3, n_neighbors=1)
model.fit(X_train, y_train)

# Pengujian model terhadap data test
y_pred = model.predict(X_test)

# Laporan hasil klasifikasi model baseline
improvement_report = classification_report(y_test, y_pred, output_dict=True, target_names=['Not Potable',"Potable"])
pd.DataFrame(improvement_report).transpose()

# Menyimpan hasil prediksi untuk confussion matrix
improvement_cf = confusion_matrix(y_test, y_pred)

"""6. Evaluasi Model

6.1 Perbandingan metriks antara model baseline dengan model yang dikembangkan
"""

# Memasukkan hasil laporan klasifikasi model pada dataframe
metrics = pd.DataFrame({'accuracy' : [baseline_report['accuracy'], improvement_report['accuracy']],
                        'f1-score_0' : [baseline_report['Not Potable']['f1-score'],improvement_report['Not Potable']['f1-score']],
                        'precision_0' : [baseline_report['Not Potable']['precision'],improvement_report['Not Potable']['precision']],
                        'recall_0' : [baseline_report['Not Potable']['recall'],improvement_report['Not Potable']['recall']],
                        'f1-score_1' : [baseline_report['Potable']['f1-score'],improvement_report['Potable']['f1-score']],
                        'precision_1' : [baseline_report['Potable']['precision'],improvement_report['Potable']['precision']],
                        'recall_1' : [baseline_report['Potable']['recall'],improvement_report['Potable']['recall']]},
                        index=['Model Baseline','Model yang Dikembangkan'])
multiheader = [('','accuracy'),
               ('Not Potable', 'f1-score'),
               ('Not Potable', 'precision'),
               ('Not Potable', 'recall'),
               ('Potable', 'f1-score'),
               ('Potable', 'precision'),
               ('Potable', 'recall')]
metrics.columns = pd.MultiIndex.from_tuples(multiheader)
# Menampilkan dataframe
metrics

"""6.2 Confussion Matrix"""

# Visualisasi hasil prediksi model baseline
figures = px.imshow(baseline_cf,
                    labels=dict(x="Label 1", y="Label 2", color="Terprediksi"),
                    x=['Not Potable', 'Potable'],
                    y=['Not Potable', 'Potable'],
                    color_continuous_scale=["#FF7171","#9FD8DF"])

figures.update_layout(font_family='Open Sans',
                      font_size=10,
                      title=dict(text='Confussion Matrix - Model Baseline',
                                 x=0.49,
                                 y=0.98,
                                 font=dict(color="#333",size=20)),
                      hoverlabel=dict(bgcolor='white'),
                      coloraxis_showscale=False
                      )
figures.show()

# Visualisasi hasil prediksi model yang dikembangkan
figures = px.imshow(improvement_cf,
                    labels=dict(x="Label 1", y="Label 2", color="Terprediksi"),
                    x=['Not Potable', 'Potable'],
                    y=['Not Potable', 'Potable'],
                    color_continuous_scale=["#FF7171","#9FD8DF"])

figures.update_layout(font_family='Open Sans',
                      font_size=10,
                      title=dict(text='Confussion Matrix - Model yang dikembangkan',
                                 x=0.49,
                                 y=0.98,
                                 font=dict(color="#333",size=20)),
                      hoverlabel=dict(bgcolor='white'),
                      coloraxis_showscale=False)
figures.show()

"""**Penutupan**
 Akses ke air minum merupakan hal penting bagi manusaia.Penerapan model ini untuk memprediksi data air yang layak dikonsumsi berdasarkan pH,Hardness,Solids,Chloramines dan lainnya.Dimana akan berdampak pada kesehatan manusia.

Referensi

Dokummentasi scikit-lear : https://scikit-learn.org/stable/
Dokumentasi Kaggel : https://www.kaggle.com/adityakadiwal/water-potability
Dokumentasi Plotly : https://plotly.com/python/
"""